{"version":3,"sources":["components/navbar.js","components/gyprockButtons/PBoard.js","components/gyprockButtons/WRBoard.js","components/gyprockButtons/Unispan.js","components/gyprockButtons/Villa.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["headersData","label","href","useStyles","makeStyles","header","paddingLeft","menuButton","size","marginLeft","toolbar","display","justifyContent","drawerContainer","padding","Header","useState","mobileView","drawerOpen","state","setState","useEffect","setResponsiveness","window","innerWidth","prevState","addEventListener","getDrawerChoices","map","Link","component","RouterLink","to","color","style","textDecoration","key","MenuItem","getMenuButtons","Button","className","AppBar","position","Toolbar","IconButton","edge","onClick","Drawer","anchor","open","onClose","PBoard","props","handleHowMany","event","howMany","target","value","handleTruck","truckWeight","count","sheetsLoaded","Container","Grid","m","xs","s","lg","for","name","type","min","placeholder","this","onChange","React","Component","WRBoard","Unispan","Villa","Home","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1d1bca9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//Material UI Dependencies\nimport { AppBar, Toolbar, makeStyles, Button, IconButton, \n  Drawer, Link, MenuItem,} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\n//for React link navigation\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst headersData = [\n  {\n    label: \"P/Board\",\n    href: \"/pboard\",\n  },\n  {\n    label: \"W/R Board\",\n    href: \"/wrboard\",\n  },\n  {\n    label: \"UNISPAN\",\n    href: \"/unispan\",\n  },\n  {\n    label: \"VILLA\",\n    href: \"/villa\",\n    \n  },\n  {\n    label: \"HOME\",\n    href: \"/home\",\n  }\n];\n\n//Materials UI layout\nconst useStyles = makeStyles(() => ({\n  header: {\n     \"@media (max-width: 900px)\": {\n      paddingLeft: 0,\n    },\n  },\n  menuButton: {\n    size: \"18px\",\n    marginLeft: \"38px\",\n },\n toolbar: {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n},\ndrawerContainer: {\n  padding: \"20px 30px\",\n},\n}));\n\nfunction Header() {\n  \n  //css styles for header\n  const {header, menuButton, toolbar, drawerContainer} = useStyles();\n  \n  const [state, setState] = useState({\n    mobileView: false,\n    drawerOpen: false,\n  })\n\nconst { mobileView, drawerOpen } = state;\n  //responsive material-ui via state\n\n  useEffect(() => {\n    const setResponsiveness = () => {\n      return window.innerWidth < 900\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\n    };\n\n    setResponsiveness();\n\n    window.addEventListener(\"resize\", () => setResponsiveness());\n  }, []);\n\n\n    const displayDesktop = () => {\n      return <Toolbar className={toolbar}> \n        <div>{getMenuButtons()}</div> \n      </Toolbar>;\n    };\n\n    const displayMobile = () => {\n      const handleDrawerOpen = () =>\n        setState((prevState) => ({ ...prevState, drawerOpen: true }));\n      const handleDrawerClose = () =>\n        setState((prevState) => ({ ...prevState, drawerOpen: false }));\n  \n      return (\n        <Toolbar>\n          <IconButton\n            {...{\n              edge: \"start\",\n              color: \"inherit\",\n              \"aria-label\": \"menu\",\n              \"aria-haspopup\": \"true\",\n              onClick: handleDrawerOpen,\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n  \n          <Drawer\n            {...{\n              anchor: \"left\",\n              open: drawerOpen,\n              onClose: handleDrawerClose,\n            }}\n          >\n            <div className={drawerContainer}>{getDrawerChoices()}</div>\n          </Drawer>\n  \n        </Toolbar>\n      );\n    };\n    \n    const getDrawerChoices = () => {\n      return headersData.map(({ label, href }) => {\n        return (\n          <Link\n            {...{\n              component: RouterLink,\n              to: href,\n              color: \"inherit\",\n              style: { textDecoration: \"none\" },\n              key: label,\n            }}\n          >\n            <MenuItem>{label}</MenuItem>\n          </Link>\n        );\n      });\n    };\n\n    const getMenuButtons = () => {\n      return headersData.map(({ label, href }) => {\n        return (\n          <Button\n            {...{\n              key: label,\n              color: \"inherit\",\n              to: href,\n              component: RouterLink,\n              className: menuButton\n            }}\n          >\n            {label}\n          </Button>\n        );\n      });\n    };\n\n    return (\n      <header className={header}>\n        <AppBar position=\"sticky\">{mobileView ? displayMobile() : displayDesktop()}</AppBar>\n      </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nimport { Container, Grid } from \"@material-ui/core\"\n\n\n \nclass PBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            sheetsLoaded: 0,\n            howMany: 0,\n            truckWeight: 0,\n        }\n    }\n\n    handleHowMany = event => {\n        this.setState({\n            howMany: event.target.value, \n        })\n    } \n\n    handleTruck = event => {\n        this.setState({\n            truckWeight: event.target.value, \n        })\n    }\n\n    render() {\n        \n        return (\n            <div>\n            <Container >\n                <Grid m={2} ></Grid>\n                <Grid xs={12} s={10} m={10} lg={10} className=\"centralGrid\">\n                    <label className=\"howManySheets\" for=\"howMany\">How many P/BOARD sheets?</label>\n                    <br></br>\n                    <input className=\"howManySheets\" name=\"howMany\" type=\"Number\" min=\"0\" placeholder=\"How many sheets?\" value={this.state.howMany} onChange={this.handleHowMany} />\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (44 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        6000x1350\n                    </button>\n\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (35 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4800x1350\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (31 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1350\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (26 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1350\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (22 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1350\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (39 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        6000x1200\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (31 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4800x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (27 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1200\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (24 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (20 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (16 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        2400x1200\n                    </button>\n                    <button className=\"reset\" onClick={() => {this.setState({count: 0, sheetsLoaded: 0})}}>\n                        RESET\n                    </button>\n                    <p className=\"answer\">\n                        {/* function for if truck weight is below 2000 kg change text to red or green */} \n                        Total Weight: {this.state.count} kg\n                    </p>\n                    <p className=\"answer\">\n                        {this.state.sheetsLoaded} P/BOARD sheets counted.\n                    </p>\n                </Grid>\n                <Grid></Grid>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default PBoard;","import React from \"react\";\n\nimport { Container, Grid } from \"@material-ui/core\"\n\n\n \nclass WRBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            sheetsLoaded: 0,\n            howMany: 0,\n            truckWeight: 0,\n        }\n    }\n\n    handleHowMany = event => {\n        this.setState({\n            howMany: event.target.value, \n        })\n    } \n\n    handleTruck = event => {\n        this.setState({\n            truckWeight: event.target.value, \n        })\n    }\n\n    render() {\n        \n        return (\n            <div>\n            <Container >\n                <Grid m={1} ></Grid>\n                <Grid xs={12} m={10} lg={10} className=\"centralGrid\">\n                    <label className=\"howManySheets\" for=\"howMany\">How many W/R BOARD sheets?</label>\n                    <br></br>\n                    <input className=\"howManySheets\" name=\"howMany\" type=\"Number\" min=\"0\" placeholder=\"How many sheets?\" value={this.state.howMany} onChange={this.handleHowMany} />\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (42 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1350\n                    </button>\n\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (36 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1350\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (30 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1350\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (24 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        2400x1350\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (37 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (32 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1200\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (27 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (22 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        2400x1200\n                    </button>\n                    <br></br>\n                    <button className=\"reset\" onClick={() => {this.setState({count: 0, sheetsLoaded: 0})}}>\n                        RESET\n                    </button>\n                    <p className=\"answer\">\n                        {/* function for if truck weight is below 2000 kg change text to red or green */} \n                        Total Weight: {this.state.count} kg\n                    </p>\n                    <p className=\"answer\">\n                        {this.state.sheetsLoaded} 10MM W/R BOARD sheets counted.\n                    </p>\n                </Grid>\n                <Grid></Grid>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default WRBoard;","import React from \"react\";\n\nimport { Container, Grid } from \"@material-ui/core\"\n\n\n \nclass Unispan extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            sheetsLoaded: 0,\n            howMany: 0,\n            truckWeight: 0,\n        }\n    }\n\n    handleHowMany = event => {\n        this.setState({\n            howMany: event.target.value, \n        })\n    } \n\n    handleTruck = event => {\n        this.setState({\n            truckWeight: event.target.value, \n        })\n    }\n\n    render() {\n        \n        return (\n            <div>\n            <Container >\n                <Grid m={1} ></Grid>\n                <Grid xs={12} m={10} lg={10} className=\"centralGrid\">\n                    <label className=\"howManySheets\" for=\"howMany\">How many UNISPAN sheets?</label>\n                    <br></br>\n                    <input className=\"howManySheets\" name=\"howMany\" type=\"Number\" min=\"0\" placeholder=\"How many sheets?\" value={this.state.howMany} onChange={this.handleHowMany} />\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (48 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        6000x1350\n                    </button>\n\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (38 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4800x1350\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (29 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1350\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (24 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1350\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (43 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        6000x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (34 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4800x1200\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (30 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (26 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1200\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (21 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1200\n                    </button>\n                    <button className=\"reset\" onClick={() => {this.setState({count: 0, sheetsLoaded: 0})}}>\n                        RESET\n                    </button>\n                    <p className=\"answer\">\n                        {/* function for if truck weight is below 2000 kg change text to red or green */} \n                        Total Weight: {this.state.count} kg\n                    </p>\n                    <p className=\"answer\">\n                        {this.state.sheetsLoaded} 10MM UNISPAN sheets counted.\n                    </p>\n                </Grid>\n                <Grid></Grid>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Unispan;","import React from \"react\";\n\nimport { Container, Grid } from \"@material-ui/core\"\n\n\n \nclass Villa extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n            sheetsLoaded: 0,\n            howMany: 0,\n        }\n    }\n\n    handleHowMany = event => {\n        this.setState({\n            howMany: event.target.value, \n        })\n    } \n\n    render() {\n        \n        return (\n            <div>\n            <Container >\n                <Grid m={1} ></Grid>\n                <Grid xs={12} m={10} lg={10} className=\"centralGrid\">\n                    <label className=\"howManySheets\" for=\"howMany\">How many VILLA sheets?</label>\n                    <br></br>\n                    <input className=\"howManySheets\" name=\"howMany\" type=\"Number\" min=\"0\" placeholder=\"How many sheets?\" value={this.state.howMany} onChange={this.handleHowMany} />\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (55 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1350\n                    </button>\n\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (47 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1350\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (39 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1350\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (32 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        2400x1350\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (49 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        4200x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (42 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3600x1200\n                    </button>\n                    \n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (35 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        3000x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (32 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        2700x1200\n                    </button>\n                    <br></br>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (28 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        2400x1200\n                    </button>\n                    <button className=\"dimension\" onClick={() => {\n                        \n                        this.setState((state) => ({\n                            count: state.count + (21 * this.state.howMany),\n                            sheetsLoaded: state.sheetsLoaded + (1 * this.state.howMany)\n                        }));\n                    }}>\n                        1800x1200\n                    </button>\n                    <button className=\"reset\" onClick={() => {this.setState({count: 0, sheetsLoaded: 0})}}>\n                        RESET\n                    </button>\n                    <p className=\"answer\">\n                        {/* function for if truck weight is below 2000 kg change text to red or green */} \n                        Total Weight: {this.state.count} kg\n                    </p>\n                    <p className=\"answer\">\n                        {this.state.sheetsLoaded} 10MM VILLA sheets counted.\n                    </p>\n                </Grid>\n                <Grid></Grid>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Villa;","import React from \"react\"\n\n//Material UI styling\nimport {Container, Grid} from \"@material-ui/core\";\n\nfunction Home() {\n    \n    \n    return (\n        <Container className=\"home\">\n            <Grid></Grid>\n            <Grid className=\"home\" lg={10}>\n                \n                <h3>Instructions: Please Read before Use</h3>\n                <p className=\"home\">\n                    This Web Application is built and designed for Gyprock Delivery Drivers in South Australia.  It is a calculator for preset Gyprock types according to their dimension and weight.  To use this application tap the desired sheet type enter how many sheets you are loading and then tap or click the appropriate button.  If it is incorrect simply tap or click reset which will set all values to 0.  \n\n                </p>\n                <p className=\"home\">\n                    Additionally, each weight and sheet load value is localised to its own webpage and will reset if the webpage is refreshed or changed.  It is recommended to write down the total wieght value before moving on to the next webpage if you are loading more than one sheet type onto the same truck.\n                </p>\n                \n            </Grid>\n        </Container>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n// imported for user authentication\n\n\n//import page files \nimport Header from \"./components/navbar\"\nimport PBoard from \"./components/gyprockButtons/PBoard\"\nimport WRBoard from \"./components/gyprockButtons/WRBoard\"\nimport Unispan from './components/gyprockButtons/Unispan';\nimport Villa from './components/gyprockButtons/Villa';\nimport Home from \"./components/Home\";\n\nfunction App() {\n  \n  return (\n    <Router>\n      <Header />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/home\" component={Home} />\n        <Route exact path=\"/pboard\" component={PBoard}/>\n        <Route exact path=\"/wrboard\" component={WRBoard}/>\n        <Route exact path=\"/unispan\" component={Unispan}/>\n        <Route exact path=\"/villa\" component={Villa} />\n    </Router>\n  );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./components/gyprockButtons/gyprock.css\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}